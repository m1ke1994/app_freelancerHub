"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.
Docs:
- https://docs.djangoproject.com/en/5.2/
"""

from pathlib import Path
import os

# --- Paths ---
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Security ---
# В DEV можно держать ключ в коде, в PROD — вынести в переменные окружения
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "dev-insecure-change-me"  # <-- замени/вынеси в .env для продакшена
)

DEBUG = True  # В PROD: False
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# Если будешь открывать в браузере по http://127.0.0.1:8000,
# этого достаточно. Для нестандартных доменов/портов добавь их сюда.
# CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:8000", "http://localhost:8000"]

# --- Applications ---
INSTALLED_APPS = [
    # Django core
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party
    "rest_framework",
    "corsheaders",  
    # Local apps
    "users",
]
CORS_ALLOW_ALL_ORIGINS = True
# --- Middleware ---
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # ← поставь как можно выше
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

# --- Templates ---
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # при необходимости добавь BASE_DIR / "templates"
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# --- Database ---
# Для старта — SQLite. Позже можно перейти на Postgres.
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# --- Password validation ---
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# --- i18n / l10n / tz ---
LANGUAGE_CODE = "ru-ru"     # можно "en-us", если так удобнее
TIME_ZONE = "Europe/Rome"
USE_I18N = True
USE_TZ = True

# --- Static files ---
STATIC_URL = "static/"
# Для продакшена добавим STATIC_ROOT и сборку collectstatic
# STATIC_ROOT = BASE_DIR / "staticfiles"

# --- Default PK type ---
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- Auth: кастомная модель пользователя ---
AUTH_USER_MODEL = "users.User"

# --- Django REST Framework ---
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}
