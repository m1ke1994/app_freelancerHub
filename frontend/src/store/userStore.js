// src/store/userStore.js
import { defineStore } from 'pinia'

export const baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000'

export const useUserStore = defineStore('user', {
  state: () => ({
    user: null,
    loading: false,
    error: null,
    access: localStorage.getItem('access') || null,
    refresh: localStorage.getItem('refresh') || null,
  }),

  getters: {
    isAuth: (s) => !!s.access && !!s.user,
    fullName: (s) => s.user ? `${s.user.first_name || ''} ${s.user.last_name || ''}`.trim() : '',
  },

  actions: {
    _setTokens({ access, refresh }) {
      if (access) { this.access = access; localStorage.setItem('access', access) }
      if (refresh) { this.refresh = refresh; localStorage.setItem('refresh', refresh) }
    },
    _clearTokens() {
      this.access = null
      this.refresh = null
      localStorage.removeItem('access')
      localStorage.removeItem('refresh')
    },
    setUser(user) { this.user = user },
    reset() { this.user = null; this.error = null; this._clearTokens() },
    logout() { this.reset() },

    async init() {
      window.addEventListener('storage', (e) => {
        if (e.key === 'access' || e.key === 'refresh') {
          this.access = localStorage.getItem('access')
          this.refresh = localStorage.getItem('refresh')
          if (this.access) this.fetchProfile().catch(() => this.reset())
          else this.user = null
        }
      })
      if (this.access && !this.user) {
        await this.fetchProfile().catch(() => this.reset())
      }
    },

    async refreshAccessToken() {
      if (!this.refresh) throw new Error('No refresh token')
      const resp = await fetch(`${baseURL}/api/accounts/token/refresh/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refresh: this.refresh }),
      })
      if (!resp.ok) { this.logout(); throw new Error('Refresh failed') }
      const data = await resp.json()
      if (!data.access) { this.logout(); throw new Error('No access in refresh response') }
      this._setTokens({ access: data.access })
      return data.access
    },

    async _authedFetch(url, options = {}, tryRefresh = true) {
      const headers = new Headers(options.headers || {})
      const isFormData = options.body instanceof FormData
      if (!isFormData) {
        headers.set('Content-Type', headers.get('Content-Type') || 'application/json')
      }
      if (this.access) headers.set('Authorization', `Bearer ${this.access}`)
      const resp = await fetch(url, { ...options, headers })
      if (resp.status === 401 && tryRefresh && this.refresh) {
        try {
          await this.refreshAccessToken()
          const h2 = new Headers(options.headers || {})
          if (!(options.body instanceof FormData)) {
            h2.set('Content-Type', h2.get('Content-Type') || 'application/json')
          }
          h2.set('Authorization', `Bearer ${this.access}`)
          return await fetch(url, { ...options, headers: h2 })
        } catch { this.logout() }
      }
      return resp
    },

    async fetchProfile() {
      if (!this.access) { this.user = null; return }
      this.loading = true
      this.error = null
      try {
        const resp = await this._authedFetch(`${baseURL}/api/accounts/profile/`)
        if (!resp.ok) {
          this.user = null
          if (resp.status === 401) this._clearTokens()
          return
        }
        const data = await resp.json()
        this.user = data
      } catch {
        this.user = null
        this._clearTokens()
        this.error = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
      } finally {
        this.loading = false
      }
    },

    async login({ email, password }) {
      this.loading = true
      this.error = null
      try {
        const resp = await fetch(`${baseURL}/api/accounts/token/`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password }),
        })
        const data = await resp.json().catch(() => ({}))
        if (!resp.ok) {
          // –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–∫–∞–∂–µ–º –æ—Ç–≤–µ—Ç DRF
          this.reset()
          this.error =
            data?.detail ||
            (Array.isArray(data?.email) ? data.email.join(' ') : data?.email) ||
            (Array.isArray(data?.password) ? data.password.join(' ') : data?.password) ||
            '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
          return false
        }
        this._setTokens({ access: data.access, refresh: data.refresh })
        await this.fetchProfile()
        return true
      } catch {
        this.error = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
        return false
      } finally {
        this.loading = false
      }
    },

    async loginWithTokens({ access, refresh }) {
      this._setTokens({ access, refresh })
      await this.fetchProfile()
      return !!this.user
    },

    async updateProfile(payload) {
      const resp = await this._authedFetch(`${baseURL}/api/accounts/profile/`, {
        method: 'PATCH',
        body: JSON.stringify(payload),
      })
      if (!resp.ok) throw new Error('Profile update failed')
      const data = await resp.json()
      this.user = data
      return data
    },

async uploadAvatar(file) {
  const fd = new FormData();
  fd.append('avatar', file);

  const resp = await this._authedFetch(`${baseURL}/api/accounts/profile/avatar/`, {
    method: 'PATCH',
    body: fd,
  });

  // –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–µ—Å—Ç—å —Ç–µ–ª–æ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞
  const data = await resp.json().catch(() => null);

  if (!resp.ok) {
    // –¥–æ—Å—Ç–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const msg =
      (data && (data.avatar?.[0] || data.detail || data.error || JSON.stringify(data))) ||
      'Avatar upload failed';
    throw new Error(msg);
  }

  // —É—Å–ø–µ—à–Ω–æ: –≤ data –ø—Ä–∏—à—ë–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –∫–ª–∞–¥—ë–º –≤ —Å—Ç–æ—Ä
  // + –Ω–µ–±–æ–ª—å—à–æ–π cache-busting –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É
  if (data?.avatar_url) {
    data.avatar_url = `${data.avatar_url}${data.avatar_url.includes('?') ? '&' : '?'}t=${Date.now()}`;
  }
  this.user = data;
  return data;
},


    // üî• –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø: —à–ª—ë–º confirm (–∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, password2 ‚Äî –Ω–æ confirm –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –±—ç–∫–∞)
    async register(payload) {
      this.loading = true
      this.error = null
      try {
        const {
          first_name, last_name, email, phone, role,
          password, password2,
        } = payload

        const body = {
          first_name: (first_name || '').trim(),
          last_name:  (last_name  || '').trim(),
          email:      (email      || '').trim().toLowerCase(),
          phone,
          role,
          password,
          confirm: password2 ?? password, // üëà –∫–ª—é—á–µ–≤–æ–µ: –±—ç–∫—É –Ω—É–∂–µ–Ω confirm
          // –º–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –∏ password2 –Ω–∞ –±—É–¥—É—â–µ–µ, –Ω–æ confirm –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω:
          password2: password2 ?? password,
        }

        const resp = await fetch(`${baseURL}/api/accounts/register/`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body),
        })

        const data = await resp.json().catch(() => ({}))
        if (!resp.ok) {
          // —Ä–∞—Å–ø–∞—Ä—Å–∏–º DRF-–æ—à–∏–±–∫–∏ –≤ —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
          if (data && typeof data === 'object') {
            const chunks = []
            for (const [k, v] of Object.entries(data)) {
              const arr = Array.isArray(v) ? v : [String(v)]
              const label = (k === 'non_field_errors' || k === 'detail') ? '–û—à–∏–±–∫–∞' : k
              chunks.push(`${label}: ${arr.join(' ')}`)
            }
            this.error = chunks.join('\n') || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
          } else {
            this.error = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
          }
          return false
        }

        // –ê–≤—Ç–æ–ª–æ–≥–∏–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const ok = await this.login({ email: body.email, password })
        if (!ok) return false

        return true
      } catch {
        this.error = '–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
        return false
      } finally {
        this.loading = false
      }
    },
  },
})
